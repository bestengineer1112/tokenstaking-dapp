{"version":3,"sources":["pages/siderbar.js","pages/index.js"],"names":["SiderBar","Params","history","useHistory","useState","className","style","position","onClick","$","toggleClass","params","console","log","removeClass","addClass","push","id","src","alt","top","href","Home","useWeb3React","active","account","library","isOpenDialog","setIsOpenDialog","rewardAmount","setRewardAmount","walletBalance","setWalletBalance","totalMinted","setTotalMinted","totalBurned","setTotalBurned","stakeAmount","setStakeAmount","stakedAmount","setStakedAmount","unstakeAmount","setUnstakeAmount","fromWei","useCallback","web3","val","toString","utils","onConnectWallet","a","floor","Math","load","Web3","provider","TokenContract","eth","Contract","Config","Token","abi","address","StakingContract","Staking","methods","balanceOf","call","walletB","totalSupply","totalMint","totalStaked","earned","rewardVal","stakedVal","stake","toWei","allowance","allowanceVal","approve","send","from","reward","getReward","unStake","unstake","useEffect","interval","clearInterval","setInterval","updateTime","Box","Typography","md","Fab","variant","size","color","title","window","ethereum","request","method","type","options","symbol","decimals","image","img","background","height","margin","sx","mr","width","chainId","netId","chainName","rpcUrls","nativeCurrency","name","blockExplorerUrls","then","alert","catch","error","Skeleton","animation","Button","startIcon","substring","length","Cwallet","isOpen","setIsOpen","TextField","label","fullWidth","value","onChange","e","target","Stack","direction","justifyContent","alignItems"],"mappings":"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","file":"static/js/7.52755e71.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport $ from \"jquery\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport axios from \"axios\";\n\nconst SiderBar = ({ Params }) => {\n    const history = useHistory();\n    const [SpinPrice, setSpinPrice] = useState();\n    const toggle = () => {\n        $(\".menu\").toggleClass(\"active\");\n    };\n\n    const selectSiderBar = (params) => {\n        console.log(params);\n        $(\".pages-btn\").removeClass(\"active\");\n        $(`#${params}`).addClass(\"active\");\n        history.push(params);\n    };\n\n    return (\n        <div className=\"left-side\">\n            <div className=\"menu\" style={{ position: \"fixed\" }}>\n                <div\n                    className=\"left-closing-arrow\"\n                    onClick={() => toggle()}\n                ></div>\n                <div className=\"menu-btns\">\n                    <a onClick={() => selectSiderBar(\"home\")}>\n                        <div className=\"pages-btn\" id=\"home\">\n                            <img src=\"./assets/images/home.svg\" alt=\"\" />\n                            <img src=\"./assets/images/home_active.svg\" alt=\"\" />\n                            <span>Home</span>\n                        </div>\n                    </a>\n                </div>\n            </div>\n            <div\n                className=\"extra-info\"\n                style={{ position: \"fixed\", top: \"450px\" }}\n            >\n                <div className=\"social-media\">\n                    <img src=\"./assets/images/gitbook.svg\" alt=\"\" />\n                    <img src=\"./assets/images/discord.svg\" alt=\"\" />\n                    <a href=\"https://twitter.com/SpintopNetwork\">\n                        <img src=\"./assets/images/twitter.svg\" alt=\"\" />\n                    </a>\n                    <img src=\"./assets/images/telegram.svg\" alt=\"\" />\n                </div>\n                <div className=\"audit\">\n                    <span>Audit in progress</span>\n                </div>\n                <img\n                    src=\"./assets/images/certik_logo.svg\"\n                    alt=\"/\"\n                    className=\"certik-logo\"\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default SiderBar;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport Fab from \"@mui/material/Fab\";\nimport { Row, Col } from \"reactstrap\";\nimport {\n    Button,\n    Skeleton,\n    Typography,\n    Box,\n    OutlinedInput,\n    TextField,\n    Stack,\n} from \"@mui/material\";\nimport LockIcon from \"@mui/icons-material/Lock\";\nimport LanguageIcon from \"@mui/icons-material/Language\";\nimport AccountBalanceWalletRoundedIcon from \"@mui/icons-material/AccountBalanceWalletRounded\";\nimport KeyboardDoubleArrowRightIcon from \"@mui/icons-material/KeyboardDoubleArrowRight\";\n//web3\nimport Web3 from \"web3\";\nimport axios from \"axios\";\nimport { useWeb3React } from \"@web3-react/core\";\n//file\nimport SiderBar from \"./siderbar\";\nimport Config from \"../config/app\";\nimport Cwallet from \"../components/Cwallet\";\nconst Home = () => {\n    // eslint-disable-next-line\n    const { active, account, library } = useWeb3React();\n    const [isOpenDialog, setIsOpenDialog] = useState(false);\n    const [rewardAmount, setRewardAmount] = useState(-1);\n    const [walletBalance, setWalletBalance] = useState(-1);\n    const [totalMinted, setTotalMinted] = useState(-1);\n    const [totalBurned, setTotalBurned] = useState(-1);\n    const [stakeAmount, setStakeAmount] = useState(0);\n    const [stakedAmount, setStakedAmount] = useState(0);\n    const [unstakeAmount, setUnstakeAmount] = useState(0);\n\n    const fromWei = useCallback((web3, val) => {\n        if (val) {\n            val = val.toString();\n            return web3.utils.fromWei(val);\n        } else {\n            return \"0\";\n        }\n    }, []);\n\n    const onConnectWallet = async () => {\n        setIsOpenDialog(true);\n    };\n\n    const floor = useCallback((val) => {\n        if (val != 0) {\n            let data = Math.floor(val * 10000);\n            const res = data / 10000;\n            return res;\n        } else {\n            return 0;\n        }\n    });\n\n    const addToken = () => {\n        if (window.ethereum) {\n            window.ethereum.request({\n                method: \"wallet_watchAsset\",\n                params: {\n                    type: \"ERC20\", // Initially only supports ERC20, but eventually more!\n                    options: {\n                        address: Config.Token.address, // The address that the token is at.\n                        symbol: Config.Token.symbol, // A ticker symbol or shorthand, up to 5 chars.\n                        decimals: 18,\n                        image: Config.Token.img,\n                    },\n                },\n            });\n        }\n    };\n\n    const swn = () => {\n        if (window.ethereum) {\n            window.ethereum\n                .request({\n                    method: \"wallet_addEthereumChain\",\n                    params: [\n                        {\n                            chainId: `0x${Config.netId.toString(16)}`,\n                            chainName: \"BNB TEST Network\",\n                            rpcUrls: [\n                                \"https://data-seed-prebsc-1-s1.binance.org:8545\",\n                            ],\n                            nativeCurrency: {\n                                name: \"BNB\",\n                                symbol: \"BNB\",\n                                decimals: 18,\n                            },\n                            blockExplorerUrls: [\"https://testnet.bscscan.com\"],\n                        },\n                    ],\n                })\n                .then(() => {\n                    alert(\n                        \"You have successfully changed to Spin Test Network.\",\n                        \"info\"\n                    );\n                })\n                .catch((error) => {\n                    alert(error.toString(), \"error\");\n                });\n        }\n    };\n\n    const load = async () => {\n        if (active) {\n            try {\n                const web3 = new Web3(library.provider);\n                const TokenContract = new web3.eth.Contract(\n                    Config.Token.abi,\n                    Config.Token.address\n                );\n                const StakingContract = new web3.eth.Contract(\n                    Config.Staking.abi,\n                    Config.Staking.address\n                );\n\n                const walletB = await TokenContract.methods\n                    .balanceOf(account)\n                    .call();\n                console.log(walletB);\n                const totalMint = await TokenContract.methods\n                    .totalSupply()\n                    .call();\n                const totalstaked = await StakingContract.methods\n                    .totalStaked()\n                    .call();\n                // const totalburned = await spinT.methods.totalSupply().call();\n                const rewardVal = await StakingContract.methods\n                    .earned(account)\n                    .call();\n\n                const stakedVal = await StakingContract.methods\n                    .balanceOf(account)\n                    .call();\n                setStakedAmount(web3.utils.fromWei(stakedVal));\n                setWalletBalance(floor(fromWei(web3, walletB)));\n                setTotalMinted(floor(fromWei(web3, totalMint)));\n                setRewardAmount(floor(fromWei(web3, rewardVal)));\n                setTotalBurned(0);\n            } catch (err) {\n                console.log(err);\n            }\n        }\n    };\n\n    const stake = async () => {\n        try {\n            if (stakeAmount > 0) {\n                const web3 = new Web3(library.provider);\n                const TokenContract = new web3.eth.Contract(\n                    Config.Token.abi,\n                    Config.Token.address\n                );\n                const StakingContract = new web3.eth.Contract(\n                    Config.Staking.abi,\n                    Config.Staking.address\n                );\n\n                const val = web3.utils.toWei(stakeAmount.toString());\n\n                const allowanceVal = await TokenContract.methods\n                    .allowance(account, Config.Staking.address)\n                    .call();\n                let approve;\n                if (web3.utils.fromWei(allowanceVal) < stakeAmount) {\n                    approve = await TokenContract.methods\n                        .approve(Config.Staking.address, val)\n                        .send({ from: account });\n                }\n                const data = await StakingContract.methods\n                    .stake(val)\n                    .send({ from: account });\n                load();\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    const reward = async () => {\n        try {\n            if (rewardAmount > 0) {\n                const web3 = new Web3(library.provider);\n\n                const StakingContract = new web3.eth.Contract(\n                    Config.Staking.abi,\n                    Config.Staking.address\n                );\n\n                const data = await StakingContract.methods\n                    .getReward()\n                    .send({ from: account });\n                load();\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    const unStake = async () => {\n        try {\n            if (unstakeAmount > 0) {\n                const web3 = new Web3(library.provider);\n                const StakingContract = new web3.eth.Contract(\n                    Config.Staking.abi,\n                    Config.Staking.address\n                );\n\n                const val = web3.utils.toWei(unstakeAmount.toString());\n                const data = await StakingContract.methods\n                    .unstake(val)\n                    .send({ from: account });\n                load();\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    const clear = () => {\n        setWalletBalance(-1);\n        setRewardAmount(-1);\n        setTotalMinted(-1);\n        setTotalBurned(-1);\n    };\n\n    useEffect(() => {\n        let interval = null;\n        if (active) {\n            load();\n            interval = setInterval(async () => {\n                load();\n            }, Config.updateTime);\n        } else {\n            clear();\n            return () => clearInterval(interval);\n        }\n    }, [active]);\n\n    return (\n        <Box>\n            <Box className=\"main-container\">\n                <SiderBar Params=\"home\" />\n                <Box className=\"right-side\">\n                    <Row>\n                        <Col>\n                            <Box className=\"big-announc\">\n                                <Typography>TOKEN</Typography>\n                                <Typography>\n                                    Gaming exclusive AMM, Staking & Farming\n                                    pools and the TOKEN Wallet.\n                                </Typography>\n                            </Box>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md={6}>\n                            <Box className=\"cust-card main_card\">\n                                <Typography className=\"main-heading\">\n                                    Staking\n                                </Typography>\n                                <Box className=\"meta-mask\">\n                                    <Box>\n                                        <img\n                                            src=\"./assets/images/Spintoken.svg\"\n                                            alt=\"\"\n                                            className=\"spintoken\"\n                                        />\n                                        <Fab\n                                            variant=\"extended\"\n                                            size=\"small\"\n                                            color=\"primary\"\n                                            aria-label=\"add\"\n                                            title=\"Add Token\"\n                                            onClick={() => addToken()}\n                                            style={{\n                                                background: \"rgb(33 15 60)\",\n                                            }}\n                                        >\n                                            <img\n                                                src=\"./assets/images/logo.png\"\n                                                style={{\n                                                    height: \"20px\",\n                                                    margin: \"0px\",\n                                                }}\n                                            />\n                                            &nbsp;&nbsp;&nbsp;\n                                            <KeyboardDoubleArrowRightIcon\n                                                sx={{ mr: 1 }}\n                                            />\n                                            <img\n                                                width={22}\n                                                src=\"./assets/images/meta-mask.svg\"\n                                                style={{ margin: \"0px\" }}\n                                                alt=\"connected\"\n                                            />\n                                        </Fab>\n                                    </Box>\n                                    <Fab\n                                        variant=\"extended\"\n                                        size=\"small\"\n                                        color=\"primary\"\n                                        aria-label=\"add\"\n                                        title=\"Add NetWork\"\n                                        onClick={() => swn()}\n                                        style={{ background: \"rgb(33 15 60)\" }}\n                                    >\n                                        <LanguageIcon sx={{ mr: 1 }} />\n                                        <KeyboardDoubleArrowRightIcon\n                                            sx={{ mr: 1 }}\n                                        />\n                                        <img\n                                            width={22}\n                                            src=\"./assets/images/meta-mask.svg\"\n                                            style={{ margin: \"0px\" }}\n                                            alt=\"connected\"\n                                        />\n                                    </Fab>\n                                </Box>\n                                <Box className=\"spin-text\">TOKEN to claim</Box>\n                                {(() => {\n                                    if (rewardAmount != -1) {\n                                        return (\n                                            <Typography\n                                                className=\"value big\"\n                                                color=\"primary\"\n                                            >\n                                                <span className=\"sub-txt\">\n                                                    {rewardAmount}&nbsp;TOKEN\n                                                </span>\n                                                <br />\n                                                {/* <span className=\"money\">\n                                                    ~$\n                                                    {rewardAmount * SpinPrice}\n                                                </span> */}\n                                            </Typography>\n                                        );\n                                    } else {\n                                        return (\n                                            <Typography>\n                                                <Skeleton\n                                                    animation=\"wave\"\n                                                    className=\"skelton\"\n                                                />\n                                            </Typography>\n                                        );\n                                    }\n                                })()}\n                                <Box className=\"spin-text\">TOKEN in wallet</Box>\n                                {(() => {\n                                    if (walletBalance != -1) {\n                                        return (\n                                            <Typography\n                                                className=\"value big\"\n                                                color=\"primary\"\n                                            >\n                                                <span className=\"sub-txt\">\n                                                    {walletBalance}&nbsp;TOKEN\n                                                </span>\n                                                <br />\n                                                {/* <span className=\"money\">\n                                                    ~$\n                                                    {floor(\n                                                        walletBalance *\n                                                            SpinPrice\n                                                    )}\n                                                </span> */}\n                                            </Typography>\n                                        );\n                                    } else {\n                                        return (\n                                            <Typography>\n                                                <Skeleton\n                                                    animation=\"wave\"\n                                                    className=\"skelton\"\n                                                />\n                                            </Typography>\n                                        );\n                                    }\n                                })()}\n                                {active ? (\n                                    <Button\n                                        variant=\"contained\"\n                                        className=\"contract-btn2 contract-res\"\n                                        startIcon={\n                                            <AccountBalanceWalletRoundedIcon />\n                                        }\n                                        color=\"secondary\"\n                                        onClick={onConnectWallet}\n                                    >\n                                        {account.substring(0, 10)} ...{\" \"}\n                                        {account.substring(account.length - 5)}\n                                    </Button>\n                                ) : (\n                                    <Button\n                                        variant=\"contained\"\n                                        className=\"contract-btn2 contract-res\"\n                                        startIcon={<LockIcon />}\n                                        color=\"secondary\"\n                                        onClick={onConnectWallet}\n                                    >\n                                        unlock wallet\n                                    </Button>\n                                )}\n                                <Cwallet\n                                    isOpen={isOpenDialog}\n                                    setIsOpen={setIsOpenDialog}\n                                />\n                            </Box>\n                        </Col>\n\n                        <Col md={6}></Col>\n\n                        <Col md={6}>\n                            <Box className=\"cust-card main_card\">\n                                <Typography className=\"main-heading\">\n                                    Stake token!\n                                </Typography>\n                                <Box>\n                                    <Box className=\"spin-text\">\n                                        Amount to stake\n                                    </Box>\n                                    <TextField\n                                        label=\"Amount\"\n                                        fullWidth\n                                        value={stakeAmount}\n                                        onChange={(e) =>\n                                            setStakeAmount(e.target.value)\n                                        }\n                                    ></TextField>\n                                </Box>\n                                <Box className=\"spin-text\">\n                                    Amount to reward\n                                </Box>\n                                {(() => {\n                                    // if (rewardAmount != -1) {\n                                    return (\n                                        <Stack\n                                            direction=\"row\"\n                                            justifyContent={\"space-between\"}\n                                            alignItems=\"center\"\n                                        >\n                                            <Typography\n                                                className=\"value big\"\n                                                color=\"primary\"\n                                            >\n                                                <span className=\"sub-txt\">\n                                                    {rewardAmount}\n                                                    &nbsp;TOKEN\n                                                </span>\n                                                <br />\n                                            </Typography>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                onClick={reward}\n                                            >\n                                                Claim\n                                            </Button>\n                                        </Stack>\n                                    );\n                                    // } else {\n                                    //     return (\n                                    //         <Typography>\n                                    //             <Skeleton\n                                    //                 animation=\"wave\"\n                                    //                 className=\"skelton\"\n                                    //             />\n                                    //         </Typography>\n                                    //     );\n                                    // }\n                                })()}\n\n                                {active ? (\n                                    <Button\n                                        variant=\"contained\"\n                                        className=\"contract-btn2 contract-res\"\n                                        color=\"secondary\"\n                                        onClick={stake}\n                                    >\n                                        Stake\n                                    </Button>\n                                ) : (\n                                    <Button\n                                        variant=\"contained\"\n                                        className=\"contract-btn2 contract-res\"\n                                        startIcon={<LockIcon />}\n                                        color=\"secondary\"\n                                        onClick={onConnectWallet}\n                                    >\n                                        unlock wallet\n                                    </Button>\n                                )}\n                            </Box>\n                        </Col>\n\n                        <Col md={6}>\n                            <Box className=\"cust-card main_card\">\n                                <Typography className=\"main-heading\">\n                                    UnStake token!\n                                </Typography>\n                                <Box>\n                                    <Box className=\"spin-text\">\n                                        Amount to unstake\n                                    </Box>\n                                    <TextField\n                                        label=\"Amount\"\n                                        fullWidth\n                                        value={unstakeAmount}\n                                        onChange={(e) =>\n                                            setUnstakeAmount(e.target.value)\n                                        }\n                                    ></TextField>\n                                </Box>\n                                <Box className=\"spin-text\">Staked Amount</Box>\n                                {(() => {\n                                    if (stakedAmount) {\n                                        return (\n                                            <Typography\n                                                className=\"value big\"\n                                                color=\"primary\"\n                                            >\n                                                <span className=\"sub-txt\">\n                                                    {stakedAmount}\n                                                    &nbsp;TOKEN\n                                                </span>\n                                                <br />\n                                            </Typography>\n                                        );\n                                    } else {\n                                        return (\n                                            <Typography>\n                                                <Skeleton\n                                                    animation=\"wave\"\n                                                    className=\"skelton\"\n                                                />\n                                            </Typography>\n                                        );\n                                    }\n                                })()}\n\n                                {active ? (\n                                    <Button\n                                        variant=\"contained\"\n                                        className=\"contract-btn2 contract-res\"\n                                        color=\"secondary\"\n                                        onClick={unStake}\n                                    >\n                                        UnStake\n                                    </Button>\n                                ) : (\n                                    <Button\n                                        variant=\"contained\"\n                                        className=\"contract-btn2 contract-res\"\n                                        startIcon={<LockIcon />}\n                                        color=\"secondary\"\n                                        onClick={onConnectWallet}\n                                    >\n                                        unlock wallet\n                                    </Button>\n                                )}\n                            </Box>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md={6}>\n                            <Box className=\"cust-card main_card small-card\">\n                                <p className=\"small-p\">Total Minted</p>\n                                {(() => {\n                                    if (totalMinted != -1) {\n                                        return (\n                                            <Typography\n                                                className=\"value big\"\n                                                color=\"primary\"\n                                            >\n                                                <span className=\"sub-txt\">\n                                                    {totalMinted}&nbsp;TOKEN\n                                                </span>\n                                            </Typography>\n                                        );\n                                    } else {\n                                        return (\n                                            <Typography>\n                                                <Skeleton\n                                                    animation=\"wave\"\n                                                    className=\"skelton\"\n                                                />\n                                            </Typography>\n                                        );\n                                    }\n                                })()}\n                            </Box>\n                        </Col>\n                        <Col md={6}>\n                            <Box className=\"cust-card main_card small-card\">\n                                <p className=\"small-p\">Total Staked</p>\n                                {(() => {\n                                    if (totalBurned != -1) {\n                                        return (\n                                            <Typography\n                                                className=\"value big\"\n                                                color=\"primary\"\n                                            >\n                                                <span className=\"sub-txt\">\n                                                    {totalBurned}&nbsp;TOKEN\n                                                </span>\n                                            </Typography>\n                                        );\n                                    } else {\n                                        return (\n                                            <Typography>\n                                                <Skeleton\n                                                    animation=\"wave\"\n                                                    className=\"skelton\"\n                                                />\n                                            </Typography>\n                                        );\n                                    }\n                                })()}\n                            </Box>\n                        </Col>\n                    </Row>\n                </Box>\n            </Box>\n        </Box>\n    );\n};\n\nexport default Home;\n"],"sourceRoot":""}